<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">


    <!-- ========================= GENERAL DEFINITIONS ========================= -->

	<!--
		作用详细讲解， 参阅http://www.cnblogs.com/leiOOlei/p/3713989.html
		1.<context:annotation-config> 是用于激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式）上面的注解。
		2.<context:component-scan>除了具有<context:annotation-config />的功能之外，
		还具有自动将带有@component,@service,@Repository等注解的对象注册到spring容器中的功能。
	 -->
	<context:component-scan base-package="com.saas.luna"/>

	<!-- 加载数据库属性配置文件 -->
	<!-- 简化写法一
		<context:property-placeholder location="classpath:jdbc.properties" />
	 -->
    <!-- 复杂写法二  -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:CONF-INF/jdbc.properties</value>
                <value>classpath:CONF-INF/Hibernate/hibernate.properties</value>
            </list>
        </property>
    </bean>

	<!-- 数据库连接池DBCP配置 -->
    <!-- Local Apache Commons DBCP DataSource that refers to a combined database -->
    <!--
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	 -->
	<!-- 数据库连接池c3p0配置 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="driverClass" value="${jdbc.driverClassName}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="maxPoolSize" value="40"></property>
        <property name="minPoolSize" value="1"></property>
        <property name="initialPoolSize" value="1"></property>
        <property name="maxIdleTime" value="20"></property>
    </bean>

	<!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
    	<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
			</props>
		</property>
        <!-- 自动扫描注解方式配置的hibernate类文件 -->
        <property name="packagesToScan" value="com.saas.luna.coreBizlogic.pojo.*" />
        <!--
        <property name="packagesToScan">
            <list>
                <value>com.hdj.pojo</value>
            </list>
        </property>
         -->
    </bean>

    <!-- Spring 3.x 4.x 已经删除了 AnnotationSessionFactoryBean 对Hibernate4的支持, 改用LocalSessionFactoryBean替换了该class -->
    <!--
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.newzhongmei.pmi.coreBusiness.entity.*" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
			</props>
		</property>
	</bean>
	 -->

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- 配置事务通知属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 定义事务传播属性 -->
        <tx:attributes>
        	<tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>


    <!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

    <!--
        Activates various annotations to be detected in bean classes: Spring's
        @Required and @Autowired, as well as JSR 250's @PostConstruct,
        @PreDestroy and @Resource (if available) and JPA's @PersistenceContext
        and @PersistenceUnit (if available).
        The implicitly registered post-processors include:
        1. AutowiredAnnotationBeanPostProcessor,
        2. CommonAnnotationBeanPostProcessor,
        3. PersistenceAnnotationBeanPostProcessor,
        4. RequiredAnnotationBeanPostProcessor.
    -->
    <context:annotation-config />

    <!--
        Instruct Spring to retrieve and apply @AspectJ aspects which are defined
        as beans in this context.
    -->
    <aop:aspectj-autoproxy />


    <!-- ========================= Aspect Configuration ======================== -->

    <aop:config>
        <!--
            This definition creates auto-proxy infrastructure based on the given pointcut,
            expressed in AspectJ pointcut language. Here: applying the advice named
            "txAdvice" to all methods defined in the com.asiasoft.ecrm.corebiz package
            or any sub-package under that.
        -->
        <aop:advisor pointcut="within(com.saas.luna.coreBizlogic.service..*)" advice-ref="txAdvice"/>
    </aop:config>

</beans>