<?xml version="1.0" encoding="UTF-8"?>

	<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to You under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->

<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<display-name>SSHProject</display-name>
	<description>Lucifer SSHProject</description>

	<!--
		==================== Define all xml location of root application context =================
	-->

	<!--
		- Key of the system property that should specify the root directory of
		this - web app. Applied by WebAppRootListener or Log4jConfigListener.
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>SSHProject.root</param-value>
	</context-param>

	<!--
		- Location of the XML file that defines the root application context - Applied by ContextLoaderListener.
	-->
	<!-- 添加对spring的支持 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:conf/spring/applicationContext*.xml</param-value>
	</context-param>

	<!--
		==================== Define all path-mapped filters =================
	-->

	<!-- Filter of spring security 2.0.5 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<!--
			<url-pattern>/pages/**</url-pattern>
			<url-pattern>/showHome.action</url-pattern>
		-->
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Filter to set character encoding on each request -->
	<filter>
		<filter-name>Set Character Encoding</filter-name>
		<filter-class>com.asiasoft.javaee.util.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>ignore</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>exposeInternals</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>Set Character Encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Filter of Struts2 (only use in struts2 2.1.x)
	<filter>
		<filter-name>struts</filter-name>
		<filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
		<init-param>
			<param-name>actionPackages</param-name>
			<param-value>com.newzhongmei.pmi.web.struts.action</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>struts</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
	-->

	<!-- ==================== Define all listener ================= -->

	<!--
		- Loads the root application context of this web app at startup, - by
		default from "applicationContext.xml". - Note that you need to fall
		back to Spring's ContextLoaderServlet for - JavaEE servers that do not
		follow the Servlet 2.4 initialization order. - - Use
		WebApplicationContextUtils.getWebApplicationContext(servletContext) -
		to access it anywhere in the web application, outside of the
		framework. - - The root context is the parent of all servlet-specific
		contexts. - This means that its beans are automatically available in
		these child contexts, - both for getBean(name) calls and (external)
		bean references.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!--
		ServletContextLoaderListener是额外添加的监听器(自己实现接口ServletContextListener),用于Spring Security,详细请查看该实现源码
	-->
	<listener>
		<listener-class>com.newzhongmei.pmi.aop.aspect.security.listener.ServletContextLoaderListener</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!--
		==================== Define default Session Configuration
		=================
	-->

	<!-- 添加对struts2的支持 -->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>   <!-- 当hibernate+spring配合使用的时候，如果设置了lazy=true,那么在读取数据的时候，当读取了父数据后， hibernate会自动关闭session，这样，当要使用子数据的时候，系统会抛出lazyinit的错误，
		这时就需要使用spring提供的 OpenSessionInViewFilter,OpenSessionInViewFilter主要是保持Session状态
		知道request将全部页面发送到客户端，这样就可以解决延迟加载带来的问题 -->
	<filter>
		<filter-name>openSessionInViewFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>openSessionInViewFilter</filter-name>
		<url-pattern>*.do,*.action</url-pattern>
	</filter-mapping>

	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>